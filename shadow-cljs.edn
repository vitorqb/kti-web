;; shadow-cljs configuration
{
 ;; All source paths. No more build-dependent source paths!
 :source-paths
 ["src/clj"
  "src/cljc"
  "src/cljs"
  "env/dev/clj"
  "test/cljs"]

 ;; All dependencies, even dev. The ones on the final release are going to depend
 ;; on the dependency tree from the build entrypoint, so the dev ones will stay
 ;; out of the final release.
 :dependencies
 [
  ;; Clojurescript deps
  [reagent "0.8.1" :exclusions [react react-dom]]
  [reagent-utils "0.3.2"]
  [pez/clerk "1.0.0"]
  [venantius/accountant "0.2.4" :exclusions [org.clojure/tools.reader]]
  [binaryage/oops "0.7.0"]
  [cljs-http "0.1.46"]

  ;; Clojure deps
  [hiccup "1.0.5"]
  [ring "1.7.1"]
  [ring-server "0.5.0"]
  [ring/ring-defaults "0.3.2"]
  [yogthos/config "1.1.1"]

  ;; Misc (clj+cljs) deps
  [metosin/reitit "0.3.9"]

  ;; Dev deps
  [binaryage/devtools "0.9.10"]
  [cider/piggieback "0.4.0"]
  [cider/cider-nrepl "0.22.0-beta8"]
  [refactor-nrepl "2.5.0-SNAPSHOT"]
  [pjstadig/humane-test-output "0.9.0"]
  [ring/ring-devel "1.7.1"]
  [ring/ring-mock "0.3.2"]
  [prone "1.6.1"]
  [nrepl "0.6.0"]
  [pjstadig/humane-test-output "0.9.0"]

  ;; Those dependencies were needed for some reason because ring was failing
  ;; with ClassNotFound exceptions without them.
  [joda-time/joda-time "2.10"]
  [clj-time "0.15.0"]]

 ;; An htt server that serves static files. :handler is only used if it is not found.
 :dev-http {9500 {:root "resources/public" :handler kti-web.handler/app}}

 ;; The http server serves the UI and the websockets for hot reload
 ;; and repl clients.
 :http {:port 9501}

 ;; Customize the port used by nrepl
 :nrepl {:port 9502}

 ;; The builds
 :builds
 {
  ;; The main build!
  :app
  {:target :browser
   ;; Put all compiled code in this folder
   :output-dir "resources/public/js/compiled"
   ;; Path used by the FE to query the static server for the static assets
   :asset-path "/js/compiled"
   ;; Re-render after load.
   :devtools {:after-load kti-web.core/re-render}
   ;; And emits a single file called `app.js` with entrypoint kti-web.dev or prod.
   :dev {:modules {:app {:entries [kti-web.dev]}}}
   :release {:modules {:app {:entries [kti-web.prod]}}}}

  ;; The test build for the browser fancy ui!
  :test-browser
  {:target :browser-test
   ;; Where to put compiled js files for the tests
   :test-dir "target/test-browser/js/compiled/"
   ;; A regexp to test if a ns is a test
   :ns-regexp "-test$"
   ;; Run a server that will serve the static files for tests only
   :devtools {:http-port 9503
              :http-root "target/test-browser/js/compiled/"}}

  ;; The test build for the karma in the command line
  :test-karma
  {:target :karma
   ;; Where to put compiled js files for the tests. Karma will need to know about this!
   :output-to "target/test-karma/js/compiled/test-karma.js"
   ;; A regexp to test if a ns is a test ns
   :ns-regexp "-test$"}}}
